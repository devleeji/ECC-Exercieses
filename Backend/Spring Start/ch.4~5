 package hello.hellospring.domain;
 public class Member {
 private Long id;
 private String name;
 public Long getId() {
 return id;
    }
 public void setId(Long id) {
 this.id = id;
    }
public String getName() {
 return name;
    }
 public void setName(String name) {
 this.name = name;
    }
 }

 package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import java.util.List;
 import java.util.Optional;
 public interface MemberRepository {
 Member save(Member member);
 Optional<Member> findById(Long id);
 Optional<Member> findByName(String name);
 List<Member> findAll();
 }

  package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import java.util.*;
 /**
 * 동시성 문제가 고려되어 있지 않음, 실무에서는 ConcurrentHashMap, AtomicLong 사용 고려
 */
 public class MemoryMemberRepository implements MemberRepository {
 private static Map<Long, Member> store = new HashMap<>()
private static long sequence = 0L;
    @Override
 public Member save(Member member) {
        member.setId(++sequence);
        store.put(member.getId(), member);
 return member;
    }
    @Override
 public Optional<Member> findById(Long id) {
 return Optional.ofNullable(store.get(id));
    }
    @Override
 public List<Member> findAll() {
return new ArrayList<>(store.values());
    }
    @Override
 public Optional<Member> findByName(String name) {
 return store.values().stream()
                .filter(member -> member.getName().equals(name))
                .findAny();
    }
 public void clearStore() {
        store.clear();
    }
 }

package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import java.util.List;
 import java.util.Optional;
 import static org.assertj.core.api.Assertions.*;
 class MemoryMemberRepositoryTest {
 MemoryMemberRepository repository = new MemoryMemberRepository();
    @AfterEach
 public void afterEach() {
        repository.clearStore();
    }
    @Test
 public void save() {
 //given
 Member member = new Member();
        member.setName("spring");
 //when
        repository.save(member);
 //then
 Member result = repository.findById(member.getId()).get();
 assertThat(result).isEqualTo(member);
    }
    @Test
 public void findByName() {
 //given
 Member member1 = new Member();
        member1.setName("spring1");
        repository.save(member1);
 Member member2 = new Member();
  member2.setName("spring2");
        repository.save(member2);
 //when
 Member result = repository.findByName("spring1").get();
 //then
 assertThat(result).isEqualTo(member1);
    }
    @Test
 public void findAll() {
 //given
 Member member1 = new Member();
        member1.setName("spring1");
        repository.save(member1);
 Member member2 = new Member();
        member2.setName("spring2");
        repository.save(member2);
 //when
 List<Member> result = repository.findAll();
 //then
 assertThat(result.size()).isEqualTo(2);
    }
 }


package hello.hellospring.service;
 import hello.hellospring.domain.Member;
 import hello.hellospring.repository.MemberRepository;
import java.util.List;
 import java.util.Optional;
 public class MemberService {
 private final MemberRepository memberRepository = new 
MemoryMemberRepository();
    /**
     * 
회원가입
     */
 public Long join(Member member) {
 validateDuplicateMember(member); //중복 회원 검증
        memberRepository.save(member);
 return member.getId();
    }
 private void validateDuplicateMember(Member member) {
        memberRepository.findByName(member.getName())
                .ifPresent(m -> {
 throw new IllegalStateException("이미 존재하는 회원입니다.");
                });
    }
 /**
     * 
전체 회원 조회
     */
 public List<Member> findMembers() {
 return memberRepository.findAll();
    }
 public Optional<Member> findOne(Long memberId) {
 return memberRepository.findById(memberId);
    }
 }



public class MemberService {
    private final MemberRepository memberRepository = 
                                          new MemoryMemberRepository();
 }

public class MemberService {
 **
 private final MemberRepository memberRepository;
 public MemberService(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
    }
    ...
 }

 package hello.hellospring.service;
 import hello.hellospring.domain.Member;
 import hello.hellospring.repository.MemoryMemberRepository;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import static org.assertj.core.api.Assertions.*;
 import static org.junit.jupiter.api.Assertions.*;
 class MemberServiceTest {
 MemberService memberService;

 MemoryMemberRepository memberRepository;
    @BeforeEach
 public void beforeEach() {
        memberRepository = new MemoryMemberRepository();
        memberService = new MemberService(memberRepository);
    }
@AfterEach
 public void afterEach() {
        memberRepository.clearStore();
    }
    @Test
 public void 회원가입() throws Exception {
 //Given
 Member member = new Member();
        member.setName("hello");
 //When
 Long saveId = memberService.join(member);
 //Then
 Member findMember = memberRepository.findById(saveId).get();
 assertEquals(member.getName(), findMember.getName());
    }
    @Test
public void 중복_회원_예외() throws Exception {
 //Given
 Member member1 = new Member();
        member1.setName("spring");
 Member member2 = new Member();
        member2.setName("spring");
 //When
        memberService.join(member1);
 IllegalStateException e = assertThrows(IllegalStateException.class,
                () -> memberService.join(member2));//예외가 발생해야 한다.
 assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
    }
 }


 ///5장
package hello.hellospring.controller;
 import hello.hellospring.service.MemberService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 @Controller
 public class MemberController {
 private final MemberService memberService;
    @Autowired
 public MemberController(MemberService memberService) {
 this.memberService = memberService;
    }
 }

 @Service
public class MemberService {
 private final MemberRepository memberRepository;
    @Autowired
 public MemberService(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
    }
 }

 
package hello.hellospring;
 import hello.hellospring.repository.MemberRepository;
 import hello.hellospring.repository.MemoryMemberRepository;
 import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 @Configuration
 public class SpringConfig {
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository());
    }
    @Bean
 public MemberRepository memberRepository() {
 return new MemoryMemberRepository();
    }
 }

 
